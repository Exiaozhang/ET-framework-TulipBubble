syntax = "proto3";
package ETModel;

//
message Actor_GetHandCard_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	repeated TulipCard HandCard = 1;
	repeated TulipCard LoanCard = 2;
	repeated int32 CardPrice = 3;
}

//通知玩家标志物数量
message Actor_GetSignCount_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int32 SignCount = 1;
}

//通知房间付款方式
message Actor_NotifyRoomPayWay_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 UserId = 1;
	int32 PayWay = 2;
}

//通知玩家付款
message Actor_NotifyPlayerPayWay_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 UserId = 1;
}

//通知玩家出价
message Actor_NotifyPlayerBid // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 UserId = 1;
	int32 LowestPrice = 2;
	TulipCard BidingTulipCard = 3;
}

//返回给房间金钱
message Actor_NotifyRoomBid // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int32  Price = 1;
}

//同步金钱
message Actor_GetMoney_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int32 Money = 1;
}

//同步市场郁金香卡牌
message Actor_GetTulip_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	repeated TulipCard FutureTulipCards = 1;
	repeated TulipCard CashTulipCards = 2;
	repeated TulipCard SelledTulipCards = 3;
}

//同步客户端的用户预定郁金香的情况
message Actor_GetTulipReserve_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	repeated GamerReserveTulip ReserveTulipCards = 94;
}

message GamerReserveTulip
{
	repeated int64 UserId = 1;
	TulipCard ReserveTulipCard = 2;
}

//发送给服务器预定的郁金香
message Actor_ReserveTulipCard_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	TulipCard ReserveTulipCard =1;
}

//发送给服务器要出售的郁金香
message Actor_SellTulipCard_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	repeated TulipCard SellTulipCard = 1;
	CollectorCard SellCollectorCard = 2;
}

//发送给客户端起始玩家
message Actor_AuthorityPlayCard_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 UserID = 1;
	int32 Stage = 2;
}

//发送给客户端当前可用的收藏家
message Actor_GetCollector_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	CollectorCard  HighPriceCollector = 1;
	int32 HighPriceCollectorCount = 2;
	CollectorCard MiddlePriceCollector = 3;
	int32 MiddlePriceCollectorCount = 4;
	CollectorCard LowPriceCollector = 5;
	int32 LowPriceCollectorCount= 6;
}

//发送给客户端本回合的事件卡
message Actor_GetEvent_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	EventCard EventCard = 1;
	int32 RemindEventCount =2;
}

//发送给客户端当前市场郁金香价格
message Actor_GetTulipPriceLevel_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int32 redPriceLevel=1;
	int32 whitePriceLevel=2;
	int32 yellowPriceLevel=3;
}

//事件牌类消息
message EventCard
{
	int32 EventType = 1;
	int32 TulipColor = 2;
	int64 Id = 3;
}
//郁金香牌类消息
message TulipCard
{
	int32 TulipCardLevel = 1;
	int32 TulipCardColor = 2;
	int32 TulipCardWeight = 3;
	int64 Id = 4;
}
//郁金香牌类消息
message CollectorTulipCard
{
	int32 TulipCardLevel = 1;
	int32 TulipCardWeight = 2;
}
//收藏家牌类消息
message CollectorCard
{
	int32 Price = 1;
	int32 RequestColor = 2;
	string Name = 3;
	repeated CollectorTulipCard CollectorTulipCard = 4;
	int64 Id = 5;
}
//牌长度消息
message GamerCardNum
{
    int64 UserID = 1;
    int32 Num = 2;
}
//初始时房间牌
message Actor_GameStartRoomCards_Ntt // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	repeated TulipCard FutureTulipCards = 1;
	repeated TulipCard CashTulipCards = 2;
}

message Actor_GameStartMention // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 9;
}
//获取房间内玩家信息请求
message C2G_GetUserInfoInRoom_Req // IRequest
{
	int32 RpcId = 90;
	int64 UserID = 1;
}
//获取房间内玩家信息返回
message G2C_GetUserInfoInRoom_Back // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string NickName = 1;
	int32 Wins = 2;
	int32 Loses = 3;
	int64 Rank = 4;
}
//----ET
message Actor_Test // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	string Info = 1;
}

message C2M_TestRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	string request = 1;
}

message M2C_TestResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string response = 1;
}

message Actor_TransferRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int32 MapIndex = 1;
}

message Actor_TransferResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message C2G_EnterMap // IRequest
{
	int32 RpcId = 90;
}

message G2C_EnterMap // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int64 UnitId = 1;
	repeated UnitInfo Units = 2;
}

message UnitInfo
{
	int64 UnitId  = 1;

	float X = 2;
	float Y = 3;
	float Z = 4;
}

message M2C_CreateUnits // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
    repeated UnitInfo Units = 1;
}

message Frame_ClickMap // IActorLocationMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Id = 94;
	
	float X = 1;
	float Y = 2;
	float Z = 3;
}

message M2C_PathfindingResult // IActorMessage
{
	int64 ActorId = 93;
	
	int64 Id = 1;

	float X = 2;
	float Y = 3;
	float Z = 4;
	
	repeated float Xs = 5;
	repeated float Ys = 6;
	repeated float Zs = 7;
}


message C2R_Ping // IRequest
{
	int32 RpcId = 90;
}

message R2C_Ping // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message G2C_Test // IMessage
{
}

message C2M_Reload // IRequest
{
	int32 RpcId = 90;
	string Account = 1;
	string Password = 2;
}

message M2C_Reload // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}