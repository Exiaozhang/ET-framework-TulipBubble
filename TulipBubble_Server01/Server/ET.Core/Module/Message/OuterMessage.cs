// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OuterMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETModel {

  #region Messages
  /// <summary>
  /// </summary>
  public partial class Actor_GetHandCard_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_GetHandCard_Ntt> _parser = new pb::MessageParser<Actor_GetHandCard_Ntt>(() => (Actor_GetHandCard_Ntt)MessagePool.Instance.Fetch(typeof(Actor_GetHandCard_Ntt)));
    public static pb::MessageParser<Actor_GetHandCard_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.TulipCard> _repeated_handCard_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.TulipCard.Parser);
    private pbc::RepeatedField<global::ETModel.TulipCard> handCard_ = new pbc::RepeatedField<global::ETModel.TulipCard>();
    public pbc::RepeatedField<global::ETModel.TulipCard> HandCard {
      get { return handCard_; }
      set { handCard_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETModel.TulipCard> _repeated_loanCard_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.TulipCard.Parser);
    private pbc::RepeatedField<global::ETModel.TulipCard> loanCard_ = new pbc::RepeatedField<global::ETModel.TulipCard>();
    public pbc::RepeatedField<global::ETModel.TulipCard> LoanCard {
      get { return loanCard_; }
      set { loanCard_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_cardPrice_codec
        = pb::FieldCodec.ForInt32(26);
    private pbc::RepeatedField<int> cardPrice_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> CardPrice {
      get { return cardPrice_; }
      set { cardPrice_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      handCard_.WriteTo(output, _repeated_handCard_codec);
      loanCard_.WriteTo(output, _repeated_loanCard_codec);
      cardPrice_.WriteTo(output, _repeated_cardPrice_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += handCard_.CalculateSize(_repeated_handCard_codec);
      size += loanCard_.CalculateSize(_repeated_loanCard_codec);
      size += cardPrice_.CalculateSize(_repeated_cardPrice_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < handCard_.Count; i++) { MessagePool.Instance.Recycle(handCard_[i]); }
      handCard_.Clear();
      for (int i = 0; i < loanCard_.Count; i++) { MessagePool.Instance.Recycle(loanCard_[i]); }
      loanCard_.Clear();
      cardPrice_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            handCard_.AddEntriesFrom(input, _repeated_handCard_codec);
            break;
          }
          case 18: {
            loanCard_.AddEntriesFrom(input, _repeated_loanCard_codec);
            break;
          }
          case 26:
          case 24: {
            cardPrice_.AddEntriesFrom(input, _repeated_cardPrice_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知玩家标志物数量
  /// </summary>
  public partial class Actor_GetSignCount_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_GetSignCount_Ntt> _parser = new pb::MessageParser<Actor_GetSignCount_Ntt>(() => (Actor_GetSignCount_Ntt)MessagePool.Instance.Fetch(typeof(Actor_GetSignCount_Ntt)));
    public static pb::MessageParser<Actor_GetSignCount_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int signCount_;
    public int SignCount {
      get { return signCount_; }
      set {
        signCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SignCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SignCount);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SignCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      signCount_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SignCount = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知房间付款方式
  /// </summary>
  public partial class Actor_NotifyRoomPayWay_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_NotifyRoomPayWay_Ntt> _parser = new pb::MessageParser<Actor_NotifyRoomPayWay_Ntt>(() => (Actor_NotifyRoomPayWay_Ntt)MessagePool.Instance.Fetch(typeof(Actor_NotifyRoomPayWay_Ntt)));
    public static pb::MessageParser<Actor_NotifyRoomPayWay_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int payWay_;
    public int PayWay {
      get { return payWay_; }
      set {
        payWay_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (PayWay != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PayWay);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (PayWay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayWay);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      payWay_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            PayWay = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知玩家付款
  /// </summary>
  public partial class Actor_NotifyPlayerPayWay_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_NotifyPlayerPayWay_Ntt> _parser = new pb::MessageParser<Actor_NotifyPlayerPayWay_Ntt>(() => (Actor_NotifyPlayerPayWay_Ntt)MessagePool.Instance.Fetch(typeof(Actor_NotifyPlayerPayWay_Ntt)));
    public static pb::MessageParser<Actor_NotifyPlayerPayWay_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知玩家出价
  /// </summary>
  public partial class Actor_NotifyPlayerBid : pb::IMessage {
    private static readonly pb::MessageParser<Actor_NotifyPlayerBid> _parser = new pb::MessageParser<Actor_NotifyPlayerBid>(() => (Actor_NotifyPlayerBid)MessagePool.Instance.Fetch(typeof(Actor_NotifyPlayerBid)));
    public static pb::MessageParser<Actor_NotifyPlayerBid> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int lowestPrice_;
    public int LowestPrice {
      get { return lowestPrice_; }
      set {
        lowestPrice_ = value;
      }
    }

    private global::ETModel.TulipCard bidingTulipCard_;
    public global::ETModel.TulipCard BidingTulipCard {
      get { return bidingTulipCard_; }
      set {
        bidingTulipCard_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (LowestPrice != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LowestPrice);
      }
      if (bidingTulipCard_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BidingTulipCard);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (LowestPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LowestPrice);
      }
      if (bidingTulipCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BidingTulipCard);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      lowestPrice_ = 0;
      if (bidingTulipCard_ != null) MessagePool.Instance.Recycle(bidingTulipCard_); bidingTulipCard_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            LowestPrice = input.ReadInt32();
            break;
          }
          case 26: {
            if (bidingTulipCard_ == null) {
              bidingTulipCard_ = new global::ETModel.TulipCard();
            }
            input.ReadMessage(bidingTulipCard_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回给房间金钱
  /// </summary>
  public partial class Actor_NotifyRoomBid : pb::IMessage {
    private static readonly pb::MessageParser<Actor_NotifyRoomBid> _parser = new pb::MessageParser<Actor_NotifyRoomBid>(() => (Actor_NotifyRoomBid)MessagePool.Instance.Fetch(typeof(Actor_NotifyRoomBid)));
    public static pb::MessageParser<Actor_NotifyRoomBid> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int price_;
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Price != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Price);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      price_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Price = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步金钱
  /// </summary>
  public partial class Actor_GetMoney_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_GetMoney_Ntt> _parser = new pb::MessageParser<Actor_GetMoney_Ntt>(() => (Actor_GetMoney_Ntt)MessagePool.Instance.Fetch(typeof(Actor_GetMoney_Ntt)));
    public static pb::MessageParser<Actor_GetMoney_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int money_;
    public int Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Money != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Money);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Money);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      money_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Money = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步市场郁金香卡牌
  /// </summary>
  public partial class Actor_GetTulip_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_GetTulip_Ntt> _parser = new pb::MessageParser<Actor_GetTulip_Ntt>(() => (Actor_GetTulip_Ntt)MessagePool.Instance.Fetch(typeof(Actor_GetTulip_Ntt)));
    public static pb::MessageParser<Actor_GetTulip_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.TulipCard> _repeated_futureTulipCards_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.TulipCard.Parser);
    private pbc::RepeatedField<global::ETModel.TulipCard> futureTulipCards_ = new pbc::RepeatedField<global::ETModel.TulipCard>();
    public pbc::RepeatedField<global::ETModel.TulipCard> FutureTulipCards {
      get { return futureTulipCards_; }
      set { futureTulipCards_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETModel.TulipCard> _repeated_cashTulipCards_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.TulipCard.Parser);
    private pbc::RepeatedField<global::ETModel.TulipCard> cashTulipCards_ = new pbc::RepeatedField<global::ETModel.TulipCard>();
    public pbc::RepeatedField<global::ETModel.TulipCard> CashTulipCards {
      get { return cashTulipCards_; }
      set { cashTulipCards_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETModel.TulipCard> _repeated_selledTulipCards_codec
        = pb::FieldCodec.ForMessage(26, global::ETModel.TulipCard.Parser);
    private pbc::RepeatedField<global::ETModel.TulipCard> selledTulipCards_ = new pbc::RepeatedField<global::ETModel.TulipCard>();
    public pbc::RepeatedField<global::ETModel.TulipCard> SelledTulipCards {
      get { return selledTulipCards_; }
      set { selledTulipCards_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      futureTulipCards_.WriteTo(output, _repeated_futureTulipCards_codec);
      cashTulipCards_.WriteTo(output, _repeated_cashTulipCards_codec);
      selledTulipCards_.WriteTo(output, _repeated_selledTulipCards_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += futureTulipCards_.CalculateSize(_repeated_futureTulipCards_codec);
      size += cashTulipCards_.CalculateSize(_repeated_cashTulipCards_codec);
      size += selledTulipCards_.CalculateSize(_repeated_selledTulipCards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < futureTulipCards_.Count; i++) { MessagePool.Instance.Recycle(futureTulipCards_[i]); }
      futureTulipCards_.Clear();
      for (int i = 0; i < cashTulipCards_.Count; i++) { MessagePool.Instance.Recycle(cashTulipCards_[i]); }
      cashTulipCards_.Clear();
      for (int i = 0; i < selledTulipCards_.Count; i++) { MessagePool.Instance.Recycle(selledTulipCards_[i]); }
      selledTulipCards_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            futureTulipCards_.AddEntriesFrom(input, _repeated_futureTulipCards_codec);
            break;
          }
          case 18: {
            cashTulipCards_.AddEntriesFrom(input, _repeated_cashTulipCards_codec);
            break;
          }
          case 26: {
            selledTulipCards_.AddEntriesFrom(input, _repeated_selledTulipCards_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步客户端的用户预定郁金香的情况
  /// </summary>
  public partial class Actor_GetTulipReserve_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_GetTulipReserve_Ntt> _parser = new pb::MessageParser<Actor_GetTulipReserve_Ntt>(() => (Actor_GetTulipReserve_Ntt)MessagePool.Instance.Fetch(typeof(Actor_GetTulipReserve_Ntt)));
    public static pb::MessageParser<Actor_GetTulipReserve_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.GamerReserveTulip> _repeated_reserveTulipCards_codec
        = pb::FieldCodec.ForMessage(754, global::ETModel.GamerReserveTulip.Parser);
    private pbc::RepeatedField<global::ETModel.GamerReserveTulip> reserveTulipCards_ = new pbc::RepeatedField<global::ETModel.GamerReserveTulip>();
    public pbc::RepeatedField<global::ETModel.GamerReserveTulip> ReserveTulipCards {
      get { return reserveTulipCards_; }
      set { reserveTulipCards_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      reserveTulipCards_.WriteTo(output, _repeated_reserveTulipCards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += reserveTulipCards_.CalculateSize(_repeated_reserveTulipCards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      for (int i = 0; i < reserveTulipCards_.Count; i++) { MessagePool.Instance.Recycle(reserveTulipCards_[i]); }
      reserveTulipCards_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 754: {
            reserveTulipCards_.AddEntriesFrom(input, _repeated_reserveTulipCards_codec);
            break;
          }
        }
      }
    }

  }

  public partial class GamerReserveTulip : pb::IMessage {
    private static readonly pb::MessageParser<GamerReserveTulip> _parser = new pb::MessageParser<GamerReserveTulip>(() => (GamerReserveTulip)MessagePool.Instance.Fetch(typeof(GamerReserveTulip)));
    public static pb::MessageParser<GamerReserveTulip> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<long> _repeated_userId_codec
        = pb::FieldCodec.ForInt64(10);
    private pbc::RepeatedField<long> userId_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> UserId {
      get { return userId_; }
      set { userId_ = value; }
    }

    private global::ETModel.TulipCard reserveTulipCard_;
    public global::ETModel.TulipCard ReserveTulipCard {
      get { return reserveTulipCard_; }
      set {
        reserveTulipCard_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      userId_.WriteTo(output, _repeated_userId_codec);
      if (reserveTulipCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReserveTulipCard);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += userId_.CalculateSize(_repeated_userId_codec);
      if (reserveTulipCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReserveTulipCard);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_.Clear();
      if (reserveTulipCard_ != null) MessagePool.Instance.Recycle(reserveTulipCard_); reserveTulipCard_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            userId_.AddEntriesFrom(input, _repeated_userId_codec);
            break;
          }
          case 18: {
            if (reserveTulipCard_ == null) {
              reserveTulipCard_ = new global::ETModel.TulipCard();
            }
            input.ReadMessage(reserveTulipCard_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送给服务器预定的郁金香
  /// </summary>
  public partial class Actor_ReserveTulipCard_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_ReserveTulipCard_Ntt> _parser = new pb::MessageParser<Actor_ReserveTulipCard_Ntt>(() => (Actor_ReserveTulipCard_Ntt)MessagePool.Instance.Fetch(typeof(Actor_ReserveTulipCard_Ntt)));
    public static pb::MessageParser<Actor_ReserveTulipCard_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETModel.TulipCard reserveTulipCard_;
    public global::ETModel.TulipCard ReserveTulipCard {
      get { return reserveTulipCard_; }
      set {
        reserveTulipCard_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (reserveTulipCard_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReserveTulipCard);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (reserveTulipCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReserveTulipCard);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (reserveTulipCard_ != null) MessagePool.Instance.Recycle(reserveTulipCard_); reserveTulipCard_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reserveTulipCard_ == null) {
              reserveTulipCard_ = new global::ETModel.TulipCard();
            }
            input.ReadMessage(reserveTulipCard_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送给服务器要出售的郁金香
  /// </summary>
  public partial class Actor_SellTulipCard_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_SellTulipCard_Ntt> _parser = new pb::MessageParser<Actor_SellTulipCard_Ntt>(() => (Actor_SellTulipCard_Ntt)MessagePool.Instance.Fetch(typeof(Actor_SellTulipCard_Ntt)));
    public static pb::MessageParser<Actor_SellTulipCard_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.TulipCard> _repeated_sellTulipCard_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.TulipCard.Parser);
    private pbc::RepeatedField<global::ETModel.TulipCard> sellTulipCard_ = new pbc::RepeatedField<global::ETModel.TulipCard>();
    public pbc::RepeatedField<global::ETModel.TulipCard> SellTulipCard {
      get { return sellTulipCard_; }
      set { sellTulipCard_ = value; }
    }

    private global::ETModel.CollectorCard sellCollectorCard_;
    public global::ETModel.CollectorCard SellCollectorCard {
      get { return sellCollectorCard_; }
      set {
        sellCollectorCard_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      sellTulipCard_.WriteTo(output, _repeated_sellTulipCard_codec);
      if (sellCollectorCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SellCollectorCard);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += sellTulipCard_.CalculateSize(_repeated_sellTulipCard_codec);
      if (sellCollectorCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellCollectorCard);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < sellTulipCard_.Count; i++) { MessagePool.Instance.Recycle(sellTulipCard_[i]); }
      sellTulipCard_.Clear();
      if (sellCollectorCard_ != null) MessagePool.Instance.Recycle(sellCollectorCard_); sellCollectorCard_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sellTulipCard_.AddEntriesFrom(input, _repeated_sellTulipCard_codec);
            break;
          }
          case 18: {
            if (sellCollectorCard_ == null) {
              sellCollectorCard_ = new global::ETModel.CollectorCard();
            }
            input.ReadMessage(sellCollectorCard_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送给客户端起始玩家
  /// </summary>
  public partial class Actor_AuthorityPlayCard_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_AuthorityPlayCard_Ntt> _parser = new pb::MessageParser<Actor_AuthorityPlayCard_Ntt>(() => (Actor_AuthorityPlayCard_Ntt)MessagePool.Instance.Fetch(typeof(Actor_AuthorityPlayCard_Ntt)));
    public static pb::MessageParser<Actor_AuthorityPlayCard_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long userID_;
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    private int stage_;
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Stage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stage);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userID_ = 0;
      stage_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            Stage = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送给客户端当前可用的收藏家
  /// </summary>
  public partial class Actor_GetCollector_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_GetCollector_Ntt> _parser = new pb::MessageParser<Actor_GetCollector_Ntt>(() => (Actor_GetCollector_Ntt)MessagePool.Instance.Fetch(typeof(Actor_GetCollector_Ntt)));
    public static pb::MessageParser<Actor_GetCollector_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETModel.CollectorCard highPriceCollector_;
    public global::ETModel.CollectorCard HighPriceCollector {
      get { return highPriceCollector_; }
      set {
        highPriceCollector_ = value;
      }
    }

    private int highPriceCollectorCount_;
    public int HighPriceCollectorCount {
      get { return highPriceCollectorCount_; }
      set {
        highPriceCollectorCount_ = value;
      }
    }

    private global::ETModel.CollectorCard middlePriceCollector_;
    public global::ETModel.CollectorCard MiddlePriceCollector {
      get { return middlePriceCollector_; }
      set {
        middlePriceCollector_ = value;
      }
    }

    private int middlePriceCollectorCount_;
    public int MiddlePriceCollectorCount {
      get { return middlePriceCollectorCount_; }
      set {
        middlePriceCollectorCount_ = value;
      }
    }

    private global::ETModel.CollectorCard lowPriceCollector_;
    public global::ETModel.CollectorCard LowPriceCollector {
      get { return lowPriceCollector_; }
      set {
        lowPriceCollector_ = value;
      }
    }

    private int lowPriceCollectorCount_;
    public int LowPriceCollectorCount {
      get { return lowPriceCollectorCount_; }
      set {
        lowPriceCollectorCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (highPriceCollector_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HighPriceCollector);
      }
      if (HighPriceCollectorCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HighPriceCollectorCount);
      }
      if (middlePriceCollector_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MiddlePriceCollector);
      }
      if (MiddlePriceCollectorCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MiddlePriceCollectorCount);
      }
      if (lowPriceCollector_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LowPriceCollector);
      }
      if (LowPriceCollectorCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LowPriceCollectorCount);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (highPriceCollector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HighPriceCollector);
      }
      if (HighPriceCollectorCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HighPriceCollectorCount);
      }
      if (middlePriceCollector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MiddlePriceCollector);
      }
      if (MiddlePriceCollectorCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MiddlePriceCollectorCount);
      }
      if (lowPriceCollector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LowPriceCollector);
      }
      if (LowPriceCollectorCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LowPriceCollectorCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (highPriceCollector_ != null) MessagePool.Instance.Recycle(highPriceCollector_); highPriceCollector_ = null;
      highPriceCollectorCount_ = 0;
      if (middlePriceCollector_ != null) MessagePool.Instance.Recycle(middlePriceCollector_); middlePriceCollector_ = null;
      middlePriceCollectorCount_ = 0;
      if (lowPriceCollector_ != null) MessagePool.Instance.Recycle(lowPriceCollector_); lowPriceCollector_ = null;
      lowPriceCollectorCount_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (highPriceCollector_ == null) {
              highPriceCollector_ = new global::ETModel.CollectorCard();
            }
            input.ReadMessage(highPriceCollector_);
            break;
          }
          case 16: {
            HighPriceCollectorCount = input.ReadInt32();
            break;
          }
          case 26: {
            if (middlePriceCollector_ == null) {
              middlePriceCollector_ = new global::ETModel.CollectorCard();
            }
            input.ReadMessage(middlePriceCollector_);
            break;
          }
          case 32: {
            MiddlePriceCollectorCount = input.ReadInt32();
            break;
          }
          case 42: {
            if (lowPriceCollector_ == null) {
              lowPriceCollector_ = new global::ETModel.CollectorCard();
            }
            input.ReadMessage(lowPriceCollector_);
            break;
          }
          case 48: {
            LowPriceCollectorCount = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送给客户端本回合的事件卡
  /// </summary>
  public partial class Actor_GetEvent_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_GetEvent_Ntt> _parser = new pb::MessageParser<Actor_GetEvent_Ntt>(() => (Actor_GetEvent_Ntt)MessagePool.Instance.Fetch(typeof(Actor_GetEvent_Ntt)));
    public static pb::MessageParser<Actor_GetEvent_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETModel.EventCard eventCard_;
    public global::ETModel.EventCard EventCard {
      get { return eventCard_; }
      set {
        eventCard_ = value;
      }
    }

    private int remindEventCount_;
    public int RemindEventCount {
      get { return remindEventCount_; }
      set {
        remindEventCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (eventCard_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EventCard);
      }
      if (RemindEventCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemindEventCount);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (eventCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventCard);
      }
      if (RemindEventCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemindEventCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (eventCard_ != null) MessagePool.Instance.Recycle(eventCard_); eventCard_ = null;
      remindEventCount_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (eventCard_ == null) {
              eventCard_ = new global::ETModel.EventCard();
            }
            input.ReadMessage(eventCard_);
            break;
          }
          case 16: {
            RemindEventCount = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送给客户端当前市场郁金香价格
  /// </summary>
  public partial class Actor_GetTulipPriceLevel_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_GetTulipPriceLevel_Ntt> _parser = new pb::MessageParser<Actor_GetTulipPriceLevel_Ntt>(() => (Actor_GetTulipPriceLevel_Ntt)MessagePool.Instance.Fetch(typeof(Actor_GetTulipPriceLevel_Ntt)));
    public static pb::MessageParser<Actor_GetTulipPriceLevel_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int redPriceLevel_;
    public int RedPriceLevel {
      get { return redPriceLevel_; }
      set {
        redPriceLevel_ = value;
      }
    }

    private int whitePriceLevel_;
    public int WhitePriceLevel {
      get { return whitePriceLevel_; }
      set {
        whitePriceLevel_ = value;
      }
    }

    private int yellowPriceLevel_;
    public int YellowPriceLevel {
      get { return yellowPriceLevel_; }
      set {
        yellowPriceLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RedPriceLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RedPriceLevel);
      }
      if (WhitePriceLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WhitePriceLevel);
      }
      if (YellowPriceLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(YellowPriceLevel);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (RedPriceLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RedPriceLevel);
      }
      if (WhitePriceLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WhitePriceLevel);
      }
      if (YellowPriceLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YellowPriceLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      redPriceLevel_ = 0;
      whitePriceLevel_ = 0;
      yellowPriceLevel_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RedPriceLevel = input.ReadInt32();
            break;
          }
          case 16: {
            WhitePriceLevel = input.ReadInt32();
            break;
          }
          case 24: {
            YellowPriceLevel = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///事件牌类消息
  /// </summary>
  public partial class EventCard : pb::IMessage {
    private static readonly pb::MessageParser<EventCard> _parser = new pb::MessageParser<EventCard>(() => (EventCard)MessagePool.Instance.Fetch(typeof(EventCard)));
    public static pb::MessageParser<EventCard> Parser { get { return _parser; } }

    private int eventType_;
    public int EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    private int tulipColor_;
    public int TulipColor {
      get { return tulipColor_; }
      set {
        tulipColor_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EventType);
      }
      if (TulipColor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TulipColor);
      }
      if (Id != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventType);
      }
      if (TulipColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TulipColor);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      eventType_ = 0;
      tulipColor_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EventType = input.ReadInt32();
            break;
          }
          case 16: {
            TulipColor = input.ReadInt32();
            break;
          }
          case 24: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///郁金香牌类消息
  /// </summary>
  public partial class TulipCard : pb::IMessage {
    private static readonly pb::MessageParser<TulipCard> _parser = new pb::MessageParser<TulipCard>(() => (TulipCard)MessagePool.Instance.Fetch(typeof(TulipCard)));
    public static pb::MessageParser<TulipCard> Parser { get { return _parser; } }

    private int tulipCardLevel_;
    public int TulipCardLevel {
      get { return tulipCardLevel_; }
      set {
        tulipCardLevel_ = value;
      }
    }

    private int tulipCardColor_;
    public int TulipCardColor {
      get { return tulipCardColor_; }
      set {
        tulipCardColor_ = value;
      }
    }

    private int tulipCardWeight_;
    public int TulipCardWeight {
      get { return tulipCardWeight_; }
      set {
        tulipCardWeight_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TulipCardLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TulipCardLevel);
      }
      if (TulipCardColor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TulipCardColor);
      }
      if (TulipCardWeight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TulipCardWeight);
      }
      if (Id != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (TulipCardLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TulipCardLevel);
      }
      if (TulipCardColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TulipCardColor);
      }
      if (TulipCardWeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TulipCardWeight);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      tulipCardLevel_ = 0;
      tulipCardColor_ = 0;
      tulipCardWeight_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TulipCardLevel = input.ReadInt32();
            break;
          }
          case 16: {
            TulipCardColor = input.ReadInt32();
            break;
          }
          case 24: {
            TulipCardWeight = input.ReadInt32();
            break;
          }
          case 32: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///郁金香牌类消息
  /// </summary>
  public partial class CollectorTulipCard : pb::IMessage {
    private static readonly pb::MessageParser<CollectorTulipCard> _parser = new pb::MessageParser<CollectorTulipCard>(() => (CollectorTulipCard)MessagePool.Instance.Fetch(typeof(CollectorTulipCard)));
    public static pb::MessageParser<CollectorTulipCard> Parser { get { return _parser; } }

    private int tulipCardLevel_;
    public int TulipCardLevel {
      get { return tulipCardLevel_; }
      set {
        tulipCardLevel_ = value;
      }
    }

    private int tulipCardWeight_;
    public int TulipCardWeight {
      get { return tulipCardWeight_; }
      set {
        tulipCardWeight_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TulipCardLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TulipCardLevel);
      }
      if (TulipCardWeight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TulipCardWeight);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (TulipCardLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TulipCardLevel);
      }
      if (TulipCardWeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TulipCardWeight);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      tulipCardLevel_ = 0;
      tulipCardWeight_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TulipCardLevel = input.ReadInt32();
            break;
          }
          case 16: {
            TulipCardWeight = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收藏家牌类消息
  /// </summary>
  public partial class CollectorCard : pb::IMessage {
    private static readonly pb::MessageParser<CollectorCard> _parser = new pb::MessageParser<CollectorCard>(() => (CollectorCard)MessagePool.Instance.Fetch(typeof(CollectorCard)));
    public static pb::MessageParser<CollectorCard> Parser { get { return _parser; } }

    private int price_;
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    private int requestColor_;
    public int RequestColor {
      get { return requestColor_; }
      set {
        requestColor_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.CollectorTulipCard> _repeated_collectorTulipCard_codec
        = pb::FieldCodec.ForMessage(34, global::ETModel.CollectorTulipCard.Parser);
    private pbc::RepeatedField<global::ETModel.CollectorTulipCard> collectorTulipCard_ = new pbc::RepeatedField<global::ETModel.CollectorTulipCard>();
    public pbc::RepeatedField<global::ETModel.CollectorTulipCard> CollectorTulipCard {
      get { return collectorTulipCard_; }
      set { collectorTulipCard_ = value; }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Price != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Price);
      }
      if (RequestColor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RequestColor);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      collectorTulipCard_.WriteTo(output, _repeated_collectorTulipCard_codec);
      if (Id != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (RequestColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestColor);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += collectorTulipCard_.CalculateSize(_repeated_collectorTulipCard_codec);
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      price_ = 0;
      requestColor_ = 0;
      name_ = "";
      for (int i = 0; i < collectorTulipCard_.Count; i++) { MessagePool.Instance.Recycle(collectorTulipCard_[i]); }
      collectorTulipCard_.Clear();
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Price = input.ReadInt32();
            break;
          }
          case 16: {
            RequestColor = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            collectorTulipCard_.AddEntriesFrom(input, _repeated_collectorTulipCard_codec);
            break;
          }
          case 40: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///牌长度消息
  /// </summary>
  public partial class GamerCardNum : pb::IMessage {
    private static readonly pb::MessageParser<GamerCardNum> _parser = new pb::MessageParser<GamerCardNum>(() => (GamerCardNum)MessagePool.Instance.Fetch(typeof(GamerCardNum)));
    public static pb::MessageParser<GamerCardNum> Parser { get { return _parser; } }

    private long userID_;
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    private int num_;
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userID_ = 0;
      num_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///初始时房间牌
  /// </summary>
  public partial class Actor_GameStartRoomCards_Ntt : pb::IMessage {
    private static readonly pb::MessageParser<Actor_GameStartRoomCards_Ntt> _parser = new pb::MessageParser<Actor_GameStartRoomCards_Ntt>(() => (Actor_GameStartRoomCards_Ntt)MessagePool.Instance.Fetch(typeof(Actor_GameStartRoomCards_Ntt)));
    public static pb::MessageParser<Actor_GameStartRoomCards_Ntt> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.TulipCard> _repeated_futureTulipCards_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.TulipCard.Parser);
    private pbc::RepeatedField<global::ETModel.TulipCard> futureTulipCards_ = new pbc::RepeatedField<global::ETModel.TulipCard>();
    public pbc::RepeatedField<global::ETModel.TulipCard> FutureTulipCards {
      get { return futureTulipCards_; }
      set { futureTulipCards_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETModel.TulipCard> _repeated_cashTulipCards_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.TulipCard.Parser);
    private pbc::RepeatedField<global::ETModel.TulipCard> cashTulipCards_ = new pbc::RepeatedField<global::ETModel.TulipCard>();
    public pbc::RepeatedField<global::ETModel.TulipCard> CashTulipCards {
      get { return cashTulipCards_; }
      set { cashTulipCards_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      futureTulipCards_.WriteTo(output, _repeated_futureTulipCards_codec);
      cashTulipCards_.WriteTo(output, _repeated_cashTulipCards_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += futureTulipCards_.CalculateSize(_repeated_futureTulipCards_codec);
      size += cashTulipCards_.CalculateSize(_repeated_cashTulipCards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < futureTulipCards_.Count; i++) { MessagePool.Instance.Recycle(futureTulipCards_[i]); }
      futureTulipCards_.Clear();
      for (int i = 0; i < cashTulipCards_.Count; i++) { MessagePool.Instance.Recycle(cashTulipCards_[i]); }
      cashTulipCards_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            futureTulipCards_.AddEntriesFrom(input, _repeated_futureTulipCards_codec);
            break;
          }
          case 18: {
            cashTulipCards_.AddEntriesFrom(input, _repeated_cashTulipCards_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_GameStartMention : pb::IMessage {
    private static readonly pb::MessageParser<Actor_GameStartMention> _parser = new pb::MessageParser<Actor_GameStartMention>(() => (Actor_GameStartMention)MessagePool.Instance.Fetch(typeof(Actor_GameStartMention)));
    public static pb::MessageParser<Actor_GameStartMention> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(ActorId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 72: {
            ActorId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取房间内玩家信息请求
  /// </summary>
  public partial class C2G_GetUserInfoInRoom_Req : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GetUserInfoInRoom_Req> _parser = new pb::MessageParser<C2G_GetUserInfoInRoom_Req>(() => (C2G_GetUserInfoInRoom_Req)MessagePool.Instance.Fetch(typeof(C2G_GetUserInfoInRoom_Req)));
    public static pb::MessageParser<C2G_GetUserInfoInRoom_Req> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userID_;
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userID_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取房间内玩家信息返回
  /// </summary>
  public partial class G2C_GetUserInfoInRoom_Back : pb::IMessage {
    private static readonly pb::MessageParser<G2C_GetUserInfoInRoom_Back> _parser = new pb::MessageParser<G2C_GetUserInfoInRoom_Back>(() => (G2C_GetUserInfoInRoom_Back)MessagePool.Instance.Fetch(typeof(G2C_GetUserInfoInRoom_Back)));
    public static pb::MessageParser<G2C_GetUserInfoInRoom_Back> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string nickName_ = "";
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int wins_;
    public int Wins {
      get { return wins_; }
      set {
        wins_ = value;
      }
    }

    private int loses_;
    public int Loses {
      get { return loses_; }
      set {
        loses_ = value;
      }
    }

    private long rank_;
    public long Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NickName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NickName);
      }
      if (Wins != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Wins);
      }
      if (Loses != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Loses);
      }
      if (Rank != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Rank);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Wins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wins);
      }
      if (Loses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Loses);
      }
      if (Rank != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rank);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      nickName_ = "";
      wins_ = 0;
      loses_ = 0;
      rank_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NickName = input.ReadString();
            break;
          }
          case 16: {
            Wins = input.ReadInt32();
            break;
          }
          case 24: {
            Loses = input.ReadInt32();
            break;
          }
          case 32: {
            Rank = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///----ET
  /// </summary>
  public partial class Actor_Test : pb::IMessage {
    private static readonly pb::MessageParser<Actor_Test> _parser = new pb::MessageParser<Actor_Test>(() => (Actor_Test)MessagePool.Instance.Fetch(typeof(Actor_Test)));
    public static pb::MessageParser<Actor_Test> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TestRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TestRequest> _parser = new pb::MessageParser<C2M_TestRequest>(() => (C2M_TestRequest)MessagePool.Instance.Fetch(typeof(C2M_TestRequest)));
    public static pb::MessageParser<C2M_TestRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string request_ = "";
    public string Request {
      get { return request_; }
      set {
        request_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Request.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Request);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Request.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Request);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      request_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Request = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TestResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TestResponse> _parser = new pb::MessageParser<M2C_TestResponse>(() => (M2C_TestResponse)MessagePool.Instance.Fetch(typeof(M2C_TestResponse)));
    public static pb::MessageParser<M2C_TestResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string response_ = "";
    public string Response {
      get { return response_; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Response.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Response);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Response.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      response_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Response = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_TransferRequest : pb::IMessage {
    private static readonly pb::MessageParser<Actor_TransferRequest> _parser = new pb::MessageParser<Actor_TransferRequest>(() => (Actor_TransferRequest)MessagePool.Instance.Fetch(typeof(Actor_TransferRequest)));
    public static pb::MessageParser<Actor_TransferRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int mapIndex_;
    public int MapIndex {
      get { return mapIndex_; }
      set {
        mapIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MapIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_TransferResponse : pb::IMessage {
    private static readonly pb::MessageParser<Actor_TransferResponse> _parser = new pb::MessageParser<Actor_TransferResponse>(() => (Actor_TransferResponse)MessagePool.Instance.Fetch(typeof(Actor_TransferResponse)));
    public static pb::MessageParser<Actor_TransferResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_EnterMap : pb::IMessage {
    private static readonly pb::MessageParser<C2G_EnterMap> _parser = new pb::MessageParser<C2G_EnterMap>(() => (C2G_EnterMap)MessagePool.Instance.Fetch(typeof(C2G_EnterMap)));
    public static pb::MessageParser<C2G_EnterMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_EnterMap : pb::IMessage {
    private static readonly pb::MessageParser<G2C_EnterMap> _parser = new pb::MessageParser<G2C_EnterMap>(() => (G2C_EnterMap)MessagePool.Instance.Fetch(typeof(G2C_EnterMap)));
    public static pb::MessageParser<G2C_EnterMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.UnitInfo> _repeated_units_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.UnitInfo.Parser);
    private pbc::RepeatedField<global::ETModel.UnitInfo> units_ = new pbc::RepeatedField<global::ETModel.UnitInfo>();
    public pbc::RepeatedField<global::ETModel.UnitInfo> Units {
      get { return units_; }
      set { units_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      units_.WriteTo(output, _repeated_units_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      for (int i = 0; i < units_.Count; i++) { MessagePool.Instance.Recycle(units_[i]); }
      units_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 18: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class UnitInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnitInfo> _parser = new pb::MessageParser<UnitInfo>(() => (UnitInfo)MessagePool.Instance.Fetch(typeof(UnitInfo)));
    public static pb::MessageParser<UnitInfo> Parser { get { return _parser; } }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_CreateUnits : pb::IMessage {
    private static readonly pb::MessageParser<M2C_CreateUnits> _parser = new pb::MessageParser<M2C_CreateUnits>(() => (M2C_CreateUnits)MessagePool.Instance.Fetch(typeof(M2C_CreateUnits)));
    public static pb::MessageParser<M2C_CreateUnits> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.UnitInfo> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.UnitInfo.Parser);
    private pbc::RepeatedField<global::ETModel.UnitInfo> units_ = new pbc::RepeatedField<global::ETModel.UnitInfo>();
    public pbc::RepeatedField<global::ETModel.UnitInfo> Units {
      get { return units_; }
      set { units_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < units_.Count; i++) { MessagePool.Instance.Recycle(units_[i]); }
      units_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Frame_ClickMap : pb::IMessage {
    private static readonly pb::MessageParser<Frame_ClickMap> _parser = new pb::MessageParser<Frame_ClickMap>(() => (Frame_ClickMap)MessagePool.Instance.Fetch(typeof(Frame_ClickMap)));
    public static pb::MessageParser<Frame_ClickMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      rpcId_ = 0;
      actorId_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PathfindingResult : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PathfindingResult> _parser = new pb::MessageParser<M2C_PathfindingResult>(() => (M2C_PathfindingResult)MessagePool.Instance.Fetch(typeof(M2C_PathfindingResult)));
    public static pb::MessageParser<M2C_PathfindingResult> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    private static readonly pb::FieldCodec<float> _repeated_xs_codec
        = pb::FieldCodec.ForFloat(42);
    private pbc::RepeatedField<float> xs_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Xs {
      get { return xs_; }
      set { xs_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_ys_codec
        = pb::FieldCodec.ForFloat(50);
    private pbc::RepeatedField<float> ys_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Ys {
      get { return ys_; }
      set { ys_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_zs_codec
        = pb::FieldCodec.ForFloat(58);
    private pbc::RepeatedField<float> zs_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Zs {
      get { return zs_; }
      set { zs_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      xs_.WriteTo(output, _repeated_xs_codec);
      ys_.WriteTo(output, _repeated_ys_codec);
      zs_.WriteTo(output, _repeated_zs_codec);
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      size += xs_.CalculateSize(_repeated_xs_codec);
      size += ys_.CalculateSize(_repeated_ys_codec);
      size += zs_.CalculateSize(_repeated_zs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      xs_.Clear();
      ys_.Clear();
      zs_.Clear();
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 42:
          case 45: {
            xs_.AddEntriesFrom(input, _repeated_xs_codec);
            break;
          }
          case 50:
          case 53: {
            ys_.AddEntriesFrom(input, _repeated_ys_codec);
            break;
          }
          case 58:
          case 61: {
            zs_.AddEntriesFrom(input, _repeated_zs_codec);
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2R_Ping : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Ping> _parser = new pb::MessageParser<C2R_Ping>(() => (C2R_Ping)MessagePool.Instance.Fetch(typeof(C2R_Ping)));
    public static pb::MessageParser<C2R_Ping> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Ping : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Ping> _parser = new pb::MessageParser<R2C_Ping>(() => (R2C_Ping)MessagePool.Instance.Fetch(typeof(R2C_Ping)));
    public static pb::MessageParser<R2C_Ping> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_Test : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Test> _parser = new pb::MessageParser<G2C_Test>(() => (G2C_Test)MessagePool.Instance.Fetch(typeof(G2C_Test)));
    public static pb::MessageParser<G2C_Test> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class C2M_Reload : pb::IMessage {
    private static readonly pb::MessageParser<C2M_Reload> _parser = new pb::MessageParser<C2M_Reload>(() => (C2M_Reload)MessagePool.Instance.Fetch(typeof(C2M_Reload)));
    public static pb::MessageParser<C2M_Reload> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_Reload : pb::IMessage {
    private static readonly pb::MessageParser<M2C_Reload> _parser = new pb::MessageParser<M2C_Reload>(() => (M2C_Reload)MessagePool.Instance.Fetch(typeof(M2C_Reload)));
    public static pb::MessageParser<M2C_Reload> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
